(in-package TRAPS ) Generated from P "macintosh-hd:hd3:CInterface Translator:Source Interfaces:ipsec.h" at Sunday July 2 2006 7 28 11 pm. FreeBSD src/sys/netinet6/ipsec.h v 1.4 .2.2 2001 /07/03 11 01 54 ume Exp KAME ipsec.h v 1.44 2001 /03/23 08 08 47 itojun Exp * Copyright ( C ) 1995 1996 1997 and 1998 WIDE Project. * All rights reserved. * * Redistribution and use in source and binary forms with or without * modification are permitted provided that the following conditions * are met * 1 . Redistributions of source code must retain the above copyright * notice this list of conditions and the following disclaimer. * 2 . Redistributions in binary form must reproduce the above copyright * notice this list of conditions and the following disclaimer in the * documentation and/or other materials provided with the distribution. * 3 . Neither the name of the project nor the names of its contributors * may be used to endorse or promote products derived from this software * without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS AS IS AND * ANY EXPRESS OR IMPLIED WARRANTIES INCLUDING BUT NOT LIMITED TO THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE * FOR ANY DIRECT INDIRECT INCIDENTAL SPECIAL EXEMPLARY OR CONSEQUENTIAL * DAMAGES ( INCLUDING BUT NOT LIMITED TO PROCUREMENT OF SUBSTITUTE GOODS * OR SERVICES LOSS OF USE DATA OR PROFITS OR BUSINESS INTERRUPTION ) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY WHETHER IN CONTRACT STRICT * LIABILITY OR TORT ( INCLUDING NEGLIGENCE OR OTHERWISE ) ARISING IN ANY WAY * OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * IPsec controller part. ifndef NETINET6 IPSEC H define NETINET6 IPSEC H ( require-interface "sys/appleapiopts" ) ( require-interface "net/pfkeyv2" ) ( require-interface "netkey/keydb" ) ifdef KERNEL ifdef APPLE API PRIVATE struct secpolicyindex u int8 t dir struct sockaddr storage src struct sockaddr storage dst u int8 t prefs u int8 t prefd u int16 t ul proto ifdefnotyet uid t uids uid t uidd gid t gids gid t gidd endif struct secpolicy LIST ENTRY ( secpolicy ) chain int refcnt struct secpolicyindex spidx u int32 t id u int state define IPSEC SPSTATE DEAD 0 define IPSEC SPSTATE ALIVE 1 u int policy struct ipsecrequest *req long created long lastused long lifetime long validtime struct ipsecrequest struct ipsecrequest *next struct secasindex saidx u int level struct secasvar *sav struct secpolicy *sp struct inpcbpolicy struct secpolicy *sp in struct secpolicy *sp out int priv struct secspacq LIST ENTRY ( secspacq ) chain struct secpolicyindex spidx long created int count endif endif KERNEL according to IANA assignment port 0 x0000 and proto 0 xff are reserved. ( defconstant IPSEC PORT ANY 0 ) define IPSEC PORT ANY 0 ( defconstant IPSEC ULPROTO ANY 255 ) define IPSEC ULPROTO ANY 255 ( defconstant IPSEC PROTO ANY 255 ) define IPSEC PROTO ANY 255 mode of security protocol NOTE DON T use IPSEC MODE ANY at SPD. It s only use in SAD ( defconstant IPSEC MODE ANY 0 ) define IPSEC MODE ANY 0 /* i.e. wildcard. */ ( defconstant IPSEC MODE TRANSPORT 1 ) define IPSEC MODE TRANSPORT 1 ( defconstant IPSEC MODE TUNNEL 2 ) define IPSEC MODE TUNNEL 2 * Direction of security policy. * NOTE Since INVALID is used just as flag. * The other are used for loop counter too. ( defconstant IPSEC DIR ANY 0 ) define IPSEC DIR ANY 0 ( defconstant IPSEC DIR INBOUND 1 ) define IPSEC DIR INBOUND 1 ( defconstant IPSEC DIR OUTBOUND 2 ) define IPSEC DIR OUTBOUND 2 ( defconstant IPSEC DIR MAX 3 ) define IPSEC DIR MAX 3 ( defconstant IPSEC DIR INVALID 4 ) define IPSEC DIR INVALID 4 Policy level * IPSEC ENTRUST and BYPASS are allowed for setsockopt ( ) in PCB * DISCARD IPSEC and NONE are allowed for setkey ( ) in SPD. * DISCARD and NONE are allowed for system default. ( defconstant IPSEC POLICY DISCARD 0 ) define IPSEC POLICY DISCARD 0 /* discarding packet */ ( defconstant IPSEC POLICY NONE 1 ) define IPSEC POLICY NONE 1 /* through IPsec engine */ ( defconstant IPSEC POLICY IPSEC 2 ) define IPSEC POLICY IPSEC 2 /* do IPsec */ ( defconstant IPSEC POLICY ENTRUST 3 ) define IPSEC POLICY ENTRUST 3 /* consulting SPD if present. */ ( defconstant IPSEC POLICY BYPASS 4 ) define IPSEC POLICY BYPASS 4 /* only for privileged socket. */ Security protocol level ( defconstant IPSEC LEVEL DEFAULT 0 ) define IPSEC LEVEL DEFAULT 0 /* reference to system default */ ( defconstant IPSEC LEVEL USE 1 ) define IPSEC LEVEL USE 1 /* use SA if present. */ ( defconstant IPSEC LEVEL REQUIRE 2 ) define IPSEC LEVEL REQUIRE 2 /* require SA. */ ( defconstant IPSEC LEVEL UNIQUE 3 ) define IPSEC LEVEL UNIQUE 3 /* unique SA. */ ( defconstant IPSEC MANUAL REQID MAX 16383 ) define IPSEC MANUAL REQID MAX 0 x3fff * if security policy level unique this id * indicate to a relative SA for use else is * zero. * 1 - 0 x3fff are reserved for manual keying. * 0 are reserved for above reason. Others is * for kernel use. * Note that this id doesn t identify SA * by only itself. ( defconstant IPSEC REPLAYWSIZE 32 ) define IPSEC REPLAYWSIZE 32 ifdef APPLE API UNSTABLE struct ipsecstat u quad t in success u quad t in polvio u quad t in nosa u quad t in inval u quad t in nomem u quad t in badspi u quad t in ahreplay u quad t in espreplay u quad t in ahauthsucc u quad t in ahauthfail u quad t in espauthsucc u quad t in espauthfail u quad t in esphist 256 u quad t in ahhist 256 u quad t in comphist 256 u quad t out success u quad t out polvio u quad t out nosa u quad t out inval u quad t out nomem u quad t out noroute u quad t out esphist 256 u quad t out ahhist 256 u quad t out comphist 256 endif APPLE API UNSTABLE * Definitions for IPsec Key sysctl operations. * Names for IPsec Key sysctl objects ( defconstant IPSECCTL STATS 1 ) define IPSECCTL STATS 1 /* stats */ ( defconstant IPSECCTL DEF POLICY 2 ) define IPSECCTL DEF POLICY 2 ( defconstant IPSECCTL DEF ESP TRANSLEV 3 ) define IPSECCTL DEF ESP TRANSLEV 3 /* int ESP transport mode */ ( defconstant IPSECCTL DEF ESP NETLEV 4 ) define IPSECCTL DEF ESP NETLEV 4 /* int ESP tunnel mode */ ( defconstant IPSECCTL DEF AH TRANSLEV 5 ) define IPSECCTL DEF AH TRANSLEV 5 /* int AH transport mode */ ( defconstant IPSECCTL DEF AH NETLEV 6 ) define IPSECCTL DEF AH NETLEV 6 /* int AH tunnel mode */ if 0 /* obsolete do not reuse */ obsolete do not reuse define IPSECCTL INBOUND CALL IKE 7 endif ( defconstant IPSECCTL AH CLEARTOS 8 ) define IPSECCTL AH CLEARTOS 8 ( defconstant IPSECCTL AH OFFSETMASK 9 ) define IPSECCTL AH OFFSETMASK 9 ( defconstant IPSECCTL DFBIT 10 ) define IPSECCTL DFBIT 10 ( defconstant IPSECCTL ECN 11 ) define IPSECCTL ECN 11 ( defconstant IPSECCTL DEBUG 12 ) define IPSECCTL DEBUG 12 ( defconstant IPSECCTL ESP RANDPAD 13 ) define IPSECCTL ESP RANDPAD 13 ( defconstant IPSECCTL MAXID 14 ) define IPSECCTL MAXID 14 define IPSECCTL NAMES 0 0 0 0 "def_policy" CTLTYPE INT "esp_trans_deflev" CTLTYPE INT "esp_net_deflev" CTLTYPE INT "ah_trans_deflev" CTLTYPE INT "ah_net_deflev" CTLTYPE INT 0 0 "ah_cleartos" CTLTYPE INT "ah_offsetmask" CTLTYPE INT "dfbit" CTLTYPE INT "ecn" CTLTYPE INT "debug" CTLTYPE INT "esp_randpad" CTLTYPE INT define IPSEC6CTL NAMES 0 0 0 0 "def_policy" CTLTYPE INT "esp_trans_deflev" CTLTYPE INT "esp_net_deflev" CTLTYPE INT "ah_trans_deflev" CTLTYPE INT "ah_net_deflev" CTLTYPE INT 0 0 0 0 0 0 0 0 "ecn" CTLTYPE INT "debug" CTLTYPE INT "esp_randpad" CTLTYPE INT ifdef KERNEL ifdef APPLE API PRIVATE struct ipsec output state struct mbuf *m struct route *ro struct sockaddr *dst struct ipsec history int ih proto u int32 t ih spi extern int ipsec debug extern struct ipsecstat ipsecstat extern struct secpolicy ip4 def policy extern int ip4 esp trans deflev extern int ip4 esp net deflev extern int ip4 ah trans deflev extern int ip4 ah net deflev extern int ip4 ah cleartos extern int ip4 ah offsetmask extern int ip4 ipsec dfbit extern int ip4 ipsec ecn extern int ip4 esp randpad define ipseclog ( x ) do if ( ipsec debug ) log x while ( 0 ) extern struct secpolicy *ipsec4 getpolicybysock P ( ( struct mbuf * u int struct socket * int * ) ) extern struct secpolicy *ipsec4 getpolicybyaddr P ( ( struct mbuf * u int int int * ) ) struct inpcb extern int ipsec init policy P ( ( struct socket *so struct inpcbpolicy ** ) ) extern int ipsec copy policy P ( ( struct inpcbpolicy * struct inpcbpolicy * ) ) extern u int ipsec get reqlevel P ( ( struct ipsecrequest * ) ) extern int ipsec4 set policy P ( ( struct inpcb *inp int optname caddr t request size t len int priv ) ) extern int ipsec4 get policy P ( ( struct inpcb *inpcb caddr t request size t len struct mbuf **mp ) ) extern int ipsec4 delete pcbpolicy P ( ( struct inpcb * ) ) extern int ipsec4 in reject so P ( ( struct mbuf * struct socket * ) ) extern int ipsec4 in reject P ( ( struct mbuf * struct inpcb * ) ) struct secas struct tcpcb extern int ipsec chkreplay P ( ( u int32 t struct secasvar * ) ) extern int ipsec updatereplay P ( ( u int32 t struct secasvar * ) ) extern size t ipsec4 hdrsiz P ( ( struct mbuf * u int struct inpcb * ) ) extern size t ipsec hdrsiz tcp P ( ( struct tcpcb * ) ) struct ip extern const char *ipsec4 logpacketstr P ( ( struct ip * u int32 t ) ) extern const char *ipsec logsastr P ( ( struct secasvar * ) ) extern void ipsec dumpmbuf P ( ( struct mbuf * ) ) extern int ipsec4 output P ( ( struct ipsec output state * struct secpolicy * int ) ) extern int ipsec4 tunnel validate P ( ( struct mbuf * int u int struct secasvar * ) ) extern struct mbuf *ipsec copypkt P ( ( struct mbuf * ) ) extern void ipsec delaux P ( ( struct mbuf * ) ) extern int ipsec setsocket P ( ( struct mbuf * struct socket * ) ) extern struct socket *ipsec getsocket P ( ( struct mbuf * ) ) extern int ipsec addhist P ( ( struct mbuf * int u int32 t ) ) extern struct ipsec history *ipsec gethist P ( ( struct mbuf * int * ) ) extern void ipsec clearhist P ( ( struct mbuf * ) ) endif endif KERNEL ifndef KERNEL confused about P ( ( char * int ) ) confused about P ( ( caddr t ) ) confused about P ( ( caddr t char * ) ) confused about P ( ( void ) ) endif /* KERNEL*/ endif /* NETINET6 IPSEC H */ ( provide-interface "ipsec" ) <EOF>